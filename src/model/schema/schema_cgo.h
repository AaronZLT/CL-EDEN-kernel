// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_OFI_RAWGRAPH_H_
#define FLATBUFFERS_GENERATED_SCHEMA_OFI_RAWGRAPH_H_

#include "model/schema/flatbuffers/flatbuffers.h"

namespace ofi {
namespace rawgraph {

struct fb_OfiRawGraph;

struct fb_OfiRawGraphHeader;

struct fb_OfiRawGraphCore;

struct fb_OfiReqParamList;

struct fb_OfiParameter;

struct fb_OfiScalar;

struct fb_BufferShapeInfo;

struct fb_OfiBuffer;

struct fb_OfiQuantParam;

struct fb_OfiMemory;

struct fb_KernelInfo;

struct fb_OfiMacroSubGraph;

struct fb_OfiNode;

struct fb_msg_offset;

struct fb_OfiTargetSpecificGraphDescriptor_DSP2018;

struct fb_OfiTargetSpecificGraphDescriptor_DSP2019;

struct fb_OfiTargetSpecificGraphDescriptor;

struct fb_OfiOpLibrary;

enum fb_OfiGraphType {
  fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED = 0,
  fb_OfiGraphType_OFI_GRAPH_TYPE_NN2018 = 1801,
  fb_OfiGraphType_OFI_GRAPH_TYPE_CVNN2019 = 1901,
  fb_OfiGraphType_MIN = fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED,
  fb_OfiGraphType_MAX = fb_OfiGraphType_OFI_GRAPH_TYPE_CVNN2019
};

inline const fb_OfiGraphType (&EnumValuesfb_OfiGraphType())[3] {
  static const fb_OfiGraphType values[] = {
    fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED,
    fb_OfiGraphType_OFI_GRAPH_TYPE_NN2018,
    fb_OfiGraphType_OFI_GRAPH_TYPE_CVNN2019
  };
  return values;
}

inline const char *EnumNamefb_OfiGraphType(fb_OfiGraphType e) {
  switch (e) {
    case fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED: return "OFI_GRAPH_TYPE_NOT_DEFINED";
    case fb_OfiGraphType_OFI_GRAPH_TYPE_NN2018: return "OFI_GRAPH_TYPE_NN2018";
    case fb_OfiGraphType_OFI_GRAPH_TYPE_CVNN2019: return "OFI_GRAPH_TYPE_CVNN2019";
    default: return "";
  }
}

enum fb_OfiSclType {
  fb_OfiSclType_OFI_SCL_TYPE_NONE = 0,
  fb_OfiSclType_OFI_SCL_TYPE_INT = 1,
  fb_OfiSclType_OFI_SCL_TYPE_DOUBLE = 2,
  fb_OfiSclType_OFI_SCL_TYPE_FLOAT = 3,
  fb_OfiSclType_OFI_SCL_TYPE_CHAR = 4,
  fb_OfiSclType_OFI_SCL_TYPE_UINT8 = 5,
  fb_OfiSclType_OFI_SCL_TYPE_INT64 = 6,
  fb_OfiSclType_OFI_SCL_TYPE_BOOL = 7,
  fb_OfiSclType_OFI_SCL_TYPE_INT16 = 8,
  fb_OfiSclType_OFI_SCL_TYPE_INT8 = 9,
  fb_OfiSclType_MIN = fb_OfiSclType_OFI_SCL_TYPE_NONE,
  fb_OfiSclType_MAX = fb_OfiSclType_OFI_SCL_TYPE_INT8
};

inline const fb_OfiSclType (&EnumValuesfb_OfiSclType())[10] {
  static const fb_OfiSclType values[] = {
    fb_OfiSclType_OFI_SCL_TYPE_NONE,
    fb_OfiSclType_OFI_SCL_TYPE_INT,
    fb_OfiSclType_OFI_SCL_TYPE_DOUBLE,
    fb_OfiSclType_OFI_SCL_TYPE_FLOAT,
    fb_OfiSclType_OFI_SCL_TYPE_CHAR,
    fb_OfiSclType_OFI_SCL_TYPE_UINT8,
    fb_OfiSclType_OFI_SCL_TYPE_INT64,
    fb_OfiSclType_OFI_SCL_TYPE_BOOL,
    fb_OfiSclType_OFI_SCL_TYPE_INT16,
    fb_OfiSclType_OFI_SCL_TYPE_INT8
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiSclType() {
  static const char * const names[11] = {
    "OFI_SCL_TYPE_NONE",
    "OFI_SCL_TYPE_INT",
    "OFI_SCL_TYPE_DOUBLE",
    "OFI_SCL_TYPE_FLOAT",
    "OFI_SCL_TYPE_CHAR",
    "OFI_SCL_TYPE_UINT8",
    "OFI_SCL_TYPE_INT64",
    "OFI_SCL_TYPE_BOOL",
    "OFI_SCL_TYPE_INT16",
    "OFI_SCL_TYPE_INT8",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiSclType(fb_OfiSclType e) {
  if (e < fb_OfiSclType_OFI_SCL_TYPE_NONE || e > fb_OfiSclType_OFI_SCL_TYPE_INT8) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiSclType()[index];
}

enum fb_OfiBufType {
  fb_OfiBufType_OFI_BUF_TYPE_NONE = 0,
  fb_OfiBufType_OFI_BUF_TYPE_U8 = 1,
  fb_OfiBufType_OFI_BUF_TYPE_U16 = 2,
  fb_OfiBufType_OFI_BUF_TYPE_U32 = 3,
  fb_OfiBufType_OFI_BUF_TYPE_S8 = 4,
  fb_OfiBufType_OFI_BUF_TYPE_S16 = 5,
  fb_OfiBufType_OFI_BUF_TYPE_S32 = 6,
  fb_OfiBufType_OFI_BUF_TYPE_RGBX888 = 7,
  fb_OfiBufType_OFI_BUF_TYPE_RGB888 = 8,
  fb_OfiBufType_OFI_BUF_TYPE_BGRX888 = 9,
  fb_OfiBufType_OFI_BUF_TYPE_BGR888 = 10,
  fb_OfiBufType_OFI_BUF_TYPE_LUV888 = 11,
  fb_OfiBufType_OFI_BUF_TYPE_YUV422_1P = 12,
  fb_OfiBufType_OFI_BUF_TYPE_YUV422_2P = 13,
  fb_OfiBufType_OFI_BUF_TYPE_YUV422_UV = 14,
  fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV21 = 15,
  fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV12 = 16,
  fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV21_UV = 17,
  fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV12_UV = 18,
  fb_OfiBufType_OFI_BUF_TYPE_F8 = 19,
  fb_OfiBufType_OFI_BUF_TYPE_F16 = 20,
  fb_OfiBufType_OFI_BUF_TYPE_F32 = 21,
  fb_OfiBufType_MIN = fb_OfiBufType_OFI_BUF_TYPE_NONE,
  fb_OfiBufType_MAX = fb_OfiBufType_OFI_BUF_TYPE_F32
};

inline const fb_OfiBufType (&EnumValuesfb_OfiBufType())[22] {
  static const fb_OfiBufType values[] = {
    fb_OfiBufType_OFI_BUF_TYPE_NONE,
    fb_OfiBufType_OFI_BUF_TYPE_U8,
    fb_OfiBufType_OFI_BUF_TYPE_U16,
    fb_OfiBufType_OFI_BUF_TYPE_U32,
    fb_OfiBufType_OFI_BUF_TYPE_S8,
    fb_OfiBufType_OFI_BUF_TYPE_S16,
    fb_OfiBufType_OFI_BUF_TYPE_S32,
    fb_OfiBufType_OFI_BUF_TYPE_RGBX888,
    fb_OfiBufType_OFI_BUF_TYPE_RGB888,
    fb_OfiBufType_OFI_BUF_TYPE_BGRX888,
    fb_OfiBufType_OFI_BUF_TYPE_BGR888,
    fb_OfiBufType_OFI_BUF_TYPE_LUV888,
    fb_OfiBufType_OFI_BUF_TYPE_YUV422_1P,
    fb_OfiBufType_OFI_BUF_TYPE_YUV422_2P,
    fb_OfiBufType_OFI_BUF_TYPE_YUV422_UV,
    fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV21,
    fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV12,
    fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV21_UV,
    fb_OfiBufType_OFI_BUF_TYPE_YUV420_NV12_UV,
    fb_OfiBufType_OFI_BUF_TYPE_F8,
    fb_OfiBufType_OFI_BUF_TYPE_F16,
    fb_OfiBufType_OFI_BUF_TYPE_F32
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiBufType() {
  static const char * const names[23] = {
    "OFI_BUF_TYPE_NONE",
    "OFI_BUF_TYPE_U8",
    "OFI_BUF_TYPE_U16",
    "OFI_BUF_TYPE_U32",
    "OFI_BUF_TYPE_S8",
    "OFI_BUF_TYPE_S16",
    "OFI_BUF_TYPE_S32",
    "OFI_BUF_TYPE_RGBX888",
    "OFI_BUF_TYPE_RGB888",
    "OFI_BUF_TYPE_BGRX888",
    "OFI_BUF_TYPE_BGR888",
    "OFI_BUF_TYPE_LUV888",
    "OFI_BUF_TYPE_YUV422_1P",
    "OFI_BUF_TYPE_YUV422_2P",
    "OFI_BUF_TYPE_YUV422_UV",
    "OFI_BUF_TYPE_YUV420_NV21",
    "OFI_BUF_TYPE_YUV420_NV12",
    "OFI_BUF_TYPE_YUV420_NV21_UV",
    "OFI_BUF_TYPE_YUV420_NV12_UV",
    "OFI_BUF_TYPE_F8",
    "OFI_BUF_TYPE_F16",
    "OFI_BUF_TYPE_F32",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiBufType(fb_OfiBufType e) {
  if (e < fb_OfiBufType_OFI_BUF_TYPE_NONE || e > fb_OfiBufType_OFI_BUF_TYPE_F32) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiBufType()[index];
}

enum fb_OfiBufNNType {
  fb_OfiBufNNType_OFI_BUF_GENERAL = 0,
  fb_OfiBufNNType_OFI_BUF_WEIGHT = 1,
  fb_OfiBufNNType_OFI_BUF_BIAS = 2,
  fb_OfiBufNNType_MIN = fb_OfiBufNNType_OFI_BUF_GENERAL,
  fb_OfiBufNNType_MAX = fb_OfiBufNNType_OFI_BUF_BIAS
};

inline const fb_OfiBufNNType (&EnumValuesfb_OfiBufNNType())[3] {
  static const fb_OfiBufNNType values[] = {
    fb_OfiBufNNType_OFI_BUF_GENERAL,
    fb_OfiBufNNType_OFI_BUF_WEIGHT,
    fb_OfiBufNNType_OFI_BUF_BIAS
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiBufNNType() {
  static const char * const names[4] = {
    "OFI_BUF_GENERAL",
    "OFI_BUF_WEIGHT",
    "OFI_BUF_BIAS",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiBufNNType(fb_OfiBufNNType e) {
  if (e < fb_OfiBufNNType_OFI_BUF_GENERAL || e > fb_OfiBufNNType_OFI_BUF_BIAS) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiBufNNType()[index];
}

enum fb_OfiFLCType {
  fb_OfiFLCType_OFI_FLC_NONE = 0,
  fb_OfiFLCType_OFI_FLC_CELL_CHANNEL = 1,
  fb_OfiFLCType_OFI_FLC_CELL_HEIGHT = 2,
  fb_OfiFLCType_MIN = fb_OfiFLCType_OFI_FLC_NONE,
  fb_OfiFLCType_MAX = fb_OfiFLCType_OFI_FLC_CELL_HEIGHT
};

inline const fb_OfiFLCType (&EnumValuesfb_OfiFLCType())[3] {
  static const fb_OfiFLCType values[] = {
    fb_OfiFLCType_OFI_FLC_NONE,
    fb_OfiFLCType_OFI_FLC_CELL_CHANNEL,
    fb_OfiFLCType_OFI_FLC_CELL_HEIGHT
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiFLCType() {
  static const char * const names[4] = {
    "OFI_FLC_NONE",
    "OFI_FLC_CELL_CHANNEL",
    "OFI_FLC_CELL_HEIGHT",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiFLCType(fb_OfiFLCType e) {
  if (e < fb_OfiFLCType_OFI_FLC_NONE || e > fb_OfiFLCType_OFI_FLC_CELL_HEIGHT) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiFLCType()[index];
}

enum fb_OfiMemoryType {
  fb_OfiMemoryType_OFI_MEM_TYPE_NONE = 0,
  fb_OfiMemoryType_OFI_MEM_TYPE_ION = 1,
  fb_OfiMemoryType_OFI_MEM_TYPE_ION_CACHED = 2,
  fb_OfiMemoryType_OFI_MEM_TYPE_MALLOC = 3,
  fb_OfiMemoryType_OFI_MEM_TYPE_ASHMEM = 4,
  fb_OfiMemoryType_MIN = fb_OfiMemoryType_OFI_MEM_TYPE_NONE,
  fb_OfiMemoryType_MAX = fb_OfiMemoryType_OFI_MEM_TYPE_ASHMEM
};

inline const fb_OfiMemoryType (&EnumValuesfb_OfiMemoryType())[5] {
  static const fb_OfiMemoryType values[] = {
    fb_OfiMemoryType_OFI_MEM_TYPE_NONE,
    fb_OfiMemoryType_OFI_MEM_TYPE_ION,
    fb_OfiMemoryType_OFI_MEM_TYPE_ION_CACHED,
    fb_OfiMemoryType_OFI_MEM_TYPE_MALLOC,
    fb_OfiMemoryType_OFI_MEM_TYPE_ASHMEM
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiMemoryType() {
  static const char * const names[6] = {
    "OFI_MEM_TYPE_NONE",
    "OFI_MEM_TYPE_ION",
    "OFI_MEM_TYPE_ION_CACHED",
    "OFI_MEM_TYPE_MALLOC",
    "OFI_MEM_TYPE_ASHMEM",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiMemoryType(fb_OfiMemoryType e) {
  if (e < fb_OfiMemoryType_OFI_MEM_TYPE_NONE || e > fb_OfiMemoryType_OFI_MEM_TYPE_ASHMEM) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiMemoryType()[index];
}

enum fb_OfiMemLoadType {
  fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_CGO = 0,
  fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_IONFD = 1,
  fb_OfiMemLoadType_OFI_MEM_LOAD_NONE = 2,
  fb_OfiMemLoadType_MIN = fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_CGO,
  fb_OfiMemLoadType_MAX = fb_OfiMemLoadType_OFI_MEM_LOAD_NONE
};

inline const fb_OfiMemLoadType (&EnumValuesfb_OfiMemLoadType())[3] {
  static const fb_OfiMemLoadType values[] = {
    fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_CGO,
    fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_IONFD,
    fb_OfiMemLoadType_OFI_MEM_LOAD_NONE
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiMemLoadType() {
  static const char * const names[4] = {
    "OFI_MEM_LOAD_FROM_CGO",
    "OFI_MEM_LOAD_FROM_IONFD",
    "OFI_MEM_LOAD_NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiMemLoadType(fb_OfiMemLoadType e) {
  if (e < fb_OfiMemLoadType_OFI_MEM_LOAD_FROM_CGO || e > fb_OfiMemLoadType_OFI_MEM_LOAD_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiMemLoadType()[index];
}

enum fb_OfiTargetType {
  fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU = 0,
  fb_OfiTargetType_OFI_TARGET_VIP = 1,
  fb_OfiTargetType_OFI_TARGET_ORCA = 2,
  fb_OfiTargetType_OFI_TARGET_ARMNN_CPU = 3,
  fb_OfiTargetType_OFI_TARGET_ARMNN_GPU = 4,
  fb_OfiTargetType_OFI_TARGET_USER = 5,
  fb_OfiTargetType_OFI_TARGET_MAX = 6,
  fb_OfiTargetType_OFI_TARGET_NONE = 99,
  fb_OfiTargetType_MIN = fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU,
  fb_OfiTargetType_MAX = fb_OfiTargetType_OFI_TARGET_NONE
};

inline const fb_OfiTargetType (&EnumValuesfb_OfiTargetType())[8] {
  static const fb_OfiTargetType values[] = {
    fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU,
    fb_OfiTargetType_OFI_TARGET_VIP,
    fb_OfiTargetType_OFI_TARGET_ORCA,
    fb_OfiTargetType_OFI_TARGET_ARMNN_CPU,
    fb_OfiTargetType_OFI_TARGET_ARMNN_GPU,
    fb_OfiTargetType_OFI_TARGET_USER,
    fb_OfiTargetType_OFI_TARGET_MAX,
    fb_OfiTargetType_OFI_TARGET_NONE
  };
  return values;
}

inline const char *EnumNamefb_OfiTargetType(fb_OfiTargetType e) {
  switch (e) {
    case fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU: return "OFI_TARGET_CUSTOM_CPU";
    case fb_OfiTargetType_OFI_TARGET_VIP: return "OFI_TARGET_VIP";
    case fb_OfiTargetType_OFI_TARGET_ORCA: return "OFI_TARGET_ORCA";
    case fb_OfiTargetType_OFI_TARGET_ARMNN_CPU: return "OFI_TARGET_ARMNN_CPU";
    case fb_OfiTargetType_OFI_TARGET_ARMNN_GPU: return "OFI_TARGET_ARMNN_GPU";
    case fb_OfiTargetType_OFI_TARGET_USER: return "OFI_TARGET_USER";
    case fb_OfiTargetType_OFI_TARGET_MAX: return "OFI_TARGET_MAX";
    case fb_OfiTargetType_OFI_TARGET_NONE: return "OFI_TARGET_NONE";
    default: return "";
  }
}

enum fb_OfiOpLibraryType {
  fb_OfiOpLibraryType_LIB_BUILTIN = 0,
  fb_OfiOpLibraryType_LIB_USR = 1,
  fb_OfiOpLibraryType_MIN = fb_OfiOpLibraryType_LIB_BUILTIN,
  fb_OfiOpLibraryType_MAX = fb_OfiOpLibraryType_LIB_USR
};

inline const fb_OfiOpLibraryType (&EnumValuesfb_OfiOpLibraryType())[2] {
  static const fb_OfiOpLibraryType values[] = {
    fb_OfiOpLibraryType_LIB_BUILTIN,
    fb_OfiOpLibraryType_LIB_USR
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiOpLibraryType() {
  static const char * const names[3] = {
    "LIB_BUILTIN",
    "LIB_USR",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiOpLibraryType(fb_OfiOpLibraryType e) {
  if (e < fb_OfiOpLibraryType_LIB_BUILTIN || e > fb_OfiOpLibraryType_LIB_USR) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiOpLibraryType()[index];
}

enum fb_OfiGraphFormatVersion {
  fb_OfiGraphFormatVersion_DEFAULT = 0,
  fb_OfiGraphFormatVersion_PRESENT = 2020051516,
  fb_OfiGraphFormatVersion_MIN = fb_OfiGraphFormatVersion_DEFAULT,
  fb_OfiGraphFormatVersion_MAX = fb_OfiGraphFormatVersion_PRESENT
};

inline const fb_OfiGraphFormatVersion (&EnumValuesfb_OfiGraphFormatVersion())[2] {
  static const fb_OfiGraphFormatVersion values[] = {
    fb_OfiGraphFormatVersion_DEFAULT,
    fb_OfiGraphFormatVersion_PRESENT
  };
  return values;
}

inline const char *EnumNamefb_OfiGraphFormatVersion(fb_OfiGraphFormatVersion e) {
  switch (e) {
    case fb_OfiGraphFormatVersion_DEFAULT: return "DEFAULT";
    case fb_OfiGraphFormatVersion_PRESENT: return "PRESENT";
    default: return "";
  }
}

enum fb_OfiKernelLoadType {
  fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL = 0,
  fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_EXTERNAL = 1,
  fb_OfiKernelLoadType_MIN = fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL,
  fb_OfiKernelLoadType_MAX = fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_EXTERNAL
};

inline const fb_OfiKernelLoadType (&EnumValuesfb_OfiKernelLoadType())[2] {
  static const fb_OfiKernelLoadType values[] = {
    fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL,
    fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_EXTERNAL
  };
  return values;
}

inline const char * const *EnumNamesfb_OfiKernelLoadType() {
  static const char * const names[3] = {
    "OFI_KERNEL_LOAD_TYPE_INTERNAL",
    "OFI_KERNEL_LOAD_TYPE_EXTERNAL",
    nullptr
  };
  return names;
}

inline const char *EnumNamefb_OfiKernelLoadType(fb_OfiKernelLoadType e) {
  if (e < fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL || e > fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_EXTERNAL) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfb_OfiKernelLoadType()[index];
}

struct fb_OfiRawGraph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_PRE_CPU_CORE = 6,
    VT_CORE = 8,
    VT_POST_CPU_CORE = 10,
    VT_PARAM = 12
  };
  const fb_OfiRawGraphHeader *header() const {
    return GetPointer<const fb_OfiRawGraphHeader *>(VT_HEADER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *pre_cpu_core() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *>(VT_PRE_CPU_CORE);
  }
  const fb_OfiRawGraphCore *core() const {
    return GetPointer<const fb_OfiRawGraphCore *>(VT_CORE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *post_cpu_core() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *>(VT_POST_CPU_CORE);
  }
  const fb_OfiReqParamList *param() const {
    return GetPointer<const fb_OfiReqParamList *>(VT_PARAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_PRE_CPU_CORE) &&
           verifier.VerifyVector(pre_cpu_core()) &&
           verifier.VerifyVectorOfTables(pre_cpu_core()) &&
           VerifyOffset(verifier, VT_CORE) &&
           verifier.VerifyTable(core()) &&
           VerifyOffset(verifier, VT_POST_CPU_CORE) &&
           verifier.VerifyVector(post_cpu_core()) &&
           verifier.VerifyVectorOfTables(post_cpu_core()) &&
           VerifyOffset(verifier, VT_PARAM) &&
           verifier.VerifyTable(param()) &&
           verifier.EndTable();
  }
};

struct fb_OfiRawGraphBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<fb_OfiRawGraphHeader> header) {
    fbb_.AddOffset(fb_OfiRawGraph::VT_HEADER, header);
  }
  void add_pre_cpu_core(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> pre_cpu_core) {
    fbb_.AddOffset(fb_OfiRawGraph::VT_PRE_CPU_CORE, pre_cpu_core);
  }
  void add_core(flatbuffers::Offset<fb_OfiRawGraphCore> core) {
    fbb_.AddOffset(fb_OfiRawGraph::VT_CORE, core);
  }
  void add_post_cpu_core(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> post_cpu_core) {
    fbb_.AddOffset(fb_OfiRawGraph::VT_POST_CPU_CORE, post_cpu_core);
  }
  void add_param(flatbuffers::Offset<fb_OfiReqParamList> param) {
    fbb_.AddOffset(fb_OfiRawGraph::VT_PARAM, param);
  }
  explicit fb_OfiRawGraphBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiRawGraphBuilder &operator=(const fb_OfiRawGraphBuilder &);
  flatbuffers::Offset<fb_OfiRawGraph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiRawGraph>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiRawGraph> Createfb_OfiRawGraph(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fb_OfiRawGraphHeader> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> pre_cpu_core = 0,
    flatbuffers::Offset<fb_OfiRawGraphCore> core = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> post_cpu_core = 0,
    flatbuffers::Offset<fb_OfiReqParamList> param = 0) {
  fb_OfiRawGraphBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_post_cpu_core(post_cpu_core);
  builder_.add_core(core);
  builder_.add_pre_cpu_core(pre_cpu_core);
  builder_.add_header(header);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiRawGraph> Createfb_OfiRawGraphDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fb_OfiRawGraphHeader> header = 0,
    const std::vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *pre_cpu_core = nullptr,
    flatbuffers::Offset<fb_OfiRawGraphCore> core = 0,
    const std::vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *post_cpu_core = nullptr,
    flatbuffers::Offset<fb_OfiReqParamList> param = 0) {
  auto pre_cpu_core__ = pre_cpu_core ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiMacroSubGraph>>(*pre_cpu_core) : 0;
  auto post_cpu_core__ = post_cpu_core ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiMacroSubGraph>>(*post_cpu_core) : 0;
  return ofi::rawgraph::Createfb_OfiRawGraph(
      _fbb,
      header,
      pre_cpu_core__,
      core,
      post_cpu_core__,
      param);
}

struct fb_OfiRawGraphHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPH_TYPE = 4,
    VT_GRAPH_APP_ID_DEFAULT = 6,
    VT_NAME = 8,
    VT_DESCRIPTION = 10,
    VT_GRAPH_FORMAT_VERSION = 12
  };
  fb_OfiGraphType graph_type() const {
    return static_cast<fb_OfiGraphType>(GetField<uint16_t>(VT_GRAPH_TYPE, 0));
  }
  uint32_t graph_app_id_default() const {
    return GetField<uint32_t>(VT_GRAPH_APP_ID_DEFAULT, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  uint32_t graph_format_version() const {
    return GetField<uint32_t>(VT_GRAPH_FORMAT_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_GRAPH_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_GRAPH_APP_ID_DEFAULT) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<uint32_t>(verifier, VT_GRAPH_FORMAT_VERSION) &&
           verifier.EndTable();
  }
};

struct fb_OfiRawGraphHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graph_type(fb_OfiGraphType graph_type) {
    fbb_.AddElement<uint16_t>(fb_OfiRawGraphHeader::VT_GRAPH_TYPE, static_cast<uint16_t>(graph_type), 0);
  }
  void add_graph_app_id_default(uint32_t graph_app_id_default) {
    fbb_.AddElement<uint32_t>(fb_OfiRawGraphHeader::VT_GRAPH_APP_ID_DEFAULT, graph_app_id_default, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(fb_OfiRawGraphHeader::VT_NAME, name);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(fb_OfiRawGraphHeader::VT_DESCRIPTION, description);
  }
  void add_graph_format_version(uint32_t graph_format_version) {
    fbb_.AddElement<uint32_t>(fb_OfiRawGraphHeader::VT_GRAPH_FORMAT_VERSION, graph_format_version, 0);
  }
  explicit fb_OfiRawGraphHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiRawGraphHeaderBuilder &operator=(const fb_OfiRawGraphHeaderBuilder &);
  flatbuffers::Offset<fb_OfiRawGraphHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiRawGraphHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiRawGraphHeader> Createfb_OfiRawGraphHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiGraphType graph_type = fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED,
    uint32_t graph_app_id_default = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    uint32_t graph_format_version = 0) {
  fb_OfiRawGraphHeaderBuilder builder_(_fbb);
  builder_.add_graph_format_version(graph_format_version);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_graph_app_id_default(graph_app_id_default);
  builder_.add_graph_type(graph_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiRawGraphHeader> Createfb_OfiRawGraphHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiGraphType graph_type = fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED,
    uint32_t graph_app_id_default = 0,
    const char *name = nullptr,
    const char *description = nullptr,
    uint32_t graph_format_version = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return ofi::rawgraph::Createfb_OfiRawGraphHeader(
      _fbb,
      graph_type,
      graph_app_id_default,
      name__,
      description__,
      graph_format_version);
}

struct fb_OfiRawGraphCore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRAPH_IN_BUFFERS = 4,
    VT_GRAPH_OUT_BUFFERS = 6,
    VT_GRAPH_USR_SCALARS = 8,
    VT_NODES = 10,
    VT_BUFFERS = 12,
    VT_SCALARS = 14,
    VT_MSGS = 16,
    VT_TARGET_INFO = 18
  };
  const flatbuffers::Vector<uint32_t> *graph_in_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GRAPH_IN_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *graph_out_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GRAPH_OUT_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *graph_usr_scalars() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GRAPH_USR_SCALARS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiNode>> *nodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiNode>> *>(VT_NODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiBuffer>> *buffers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiBuffer>> *>(VT_BUFFERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiScalar>> *scalars() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiScalar>> *>(VT_SCALARS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *msgs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *>(VT_MSGS);
  }
  const fb_OfiTargetSpecificGraphDescriptor *target_info() const {
    return GetPointer<const fb_OfiTargetSpecificGraphDescriptor *>(VT_TARGET_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GRAPH_IN_BUFFERS) &&
           verifier.VerifyVector(graph_in_buffers()) &&
           VerifyOffset(verifier, VT_GRAPH_OUT_BUFFERS) &&
           verifier.VerifyVector(graph_out_buffers()) &&
           VerifyOffset(verifier, VT_GRAPH_USR_SCALARS) &&
           verifier.VerifyVector(graph_usr_scalars()) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           VerifyOffset(verifier, VT_BUFFERS) &&
           verifier.VerifyVector(buffers()) &&
           verifier.VerifyVectorOfTables(buffers()) &&
           VerifyOffset(verifier, VT_SCALARS) &&
           verifier.VerifyVector(scalars()) &&
           verifier.VerifyVectorOfTables(scalars()) &&
           VerifyOffset(verifier, VT_MSGS) &&
           verifier.VerifyVector(msgs()) &&
           verifier.VerifyVectorOfTables(msgs()) &&
           VerifyOffset(verifier, VT_TARGET_INFO) &&
           verifier.VerifyTable(target_info()) &&
           verifier.EndTable();
  }
};

struct fb_OfiRawGraphCoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graph_in_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_in_buffers) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_GRAPH_IN_BUFFERS, graph_in_buffers);
  }
  void add_graph_out_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_out_buffers) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_GRAPH_OUT_BUFFERS, graph_out_buffers);
  }
  void add_graph_usr_scalars(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_usr_scalars) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_GRAPH_USR_SCALARS, graph_usr_scalars);
  }
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiNode>>> nodes) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_NODES, nodes);
  }
  void add_buffers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiBuffer>>> buffers) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_BUFFERS, buffers);
  }
  void add_scalars(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiScalar>>> scalars) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_SCALARS, scalars);
  }
  void add_msgs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> msgs) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_MSGS, msgs);
  }
  void add_target_info(flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor> target_info) {
    fbb_.AddOffset(fb_OfiRawGraphCore::VT_TARGET_INFO, target_info);
  }
  explicit fb_OfiRawGraphCoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiRawGraphCoreBuilder &operator=(const fb_OfiRawGraphCoreBuilder &);
  flatbuffers::Offset<fb_OfiRawGraphCore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiRawGraphCore>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiRawGraphCore> Createfb_OfiRawGraphCore(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_in_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_out_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> graph_usr_scalars = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiNode>>> nodes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiBuffer>>> buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiScalar>>> scalars = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiMacroSubGraph>>> msgs = 0,
    flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor> target_info = 0) {
  fb_OfiRawGraphCoreBuilder builder_(_fbb);
  builder_.add_target_info(target_info);
  builder_.add_msgs(msgs);
  builder_.add_scalars(scalars);
  builder_.add_buffers(buffers);
  builder_.add_nodes(nodes);
  builder_.add_graph_usr_scalars(graph_usr_scalars);
  builder_.add_graph_out_buffers(graph_out_buffers);
  builder_.add_graph_in_buffers(graph_in_buffers);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiRawGraphCore> Createfb_OfiRawGraphCoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *graph_in_buffers = nullptr,
    const std::vector<uint32_t> *graph_out_buffers = nullptr,
    const std::vector<uint32_t> *graph_usr_scalars = nullptr,
    const std::vector<flatbuffers::Offset<fb_OfiNode>> *nodes = nullptr,
    const std::vector<flatbuffers::Offset<fb_OfiBuffer>> *buffers = nullptr,
    const std::vector<flatbuffers::Offset<fb_OfiScalar>> *scalars = nullptr,
    const std::vector<flatbuffers::Offset<fb_OfiMacroSubGraph>> *msgs = nullptr,
    flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor> target_info = 0) {
  auto graph_in_buffers__ = graph_in_buffers ? _fbb.CreateVector<uint32_t>(*graph_in_buffers) : 0;
  auto graph_out_buffers__ = graph_out_buffers ? _fbb.CreateVector<uint32_t>(*graph_out_buffers) : 0;
  auto graph_usr_scalars__ = graph_usr_scalars ? _fbb.CreateVector<uint32_t>(*graph_usr_scalars) : 0;
  auto nodes__ = nodes ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiNode>>(*nodes) : 0;
  auto buffers__ = buffers ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiBuffer>>(*buffers) : 0;
  auto scalars__ = scalars ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiScalar>>(*scalars) : 0;
  auto msgs__ = msgs ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiMacroSubGraph>>(*msgs) : 0;
  return ofi::rawgraph::Createfb_OfiRawGraphCore(
      _fbb,
      graph_in_buffers__,
      graph_out_buffers__,
      graph_usr_scalars__,
      nodes__,
      buffers__,
      scalars__,
      msgs__,
      target_info);
}

struct fb_OfiReqParamList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEV_PARAM_MAX_IDX = 4,
    VT_PARAM_LIST = 6
  };
  uint32_t dev_param_max_idx() const {
    return GetField<uint32_t>(VT_DEV_PARAM_MAX_IDX, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiParameter>> *param_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiParameter>> *>(VT_PARAM_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEV_PARAM_MAX_IDX) &&
           VerifyOffset(verifier, VT_PARAM_LIST) &&
           verifier.VerifyVector(param_list()) &&
           verifier.VerifyVectorOfTables(param_list()) &&
           verifier.EndTable();
  }
};

struct fb_OfiReqParamListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dev_param_max_idx(uint32_t dev_param_max_idx) {
    fbb_.AddElement<uint32_t>(fb_OfiReqParamList::VT_DEV_PARAM_MAX_IDX, dev_param_max_idx, 0);
  }
  void add_param_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiParameter>>> param_list) {
    fbb_.AddOffset(fb_OfiReqParamList::VT_PARAM_LIST, param_list);
  }
  explicit fb_OfiReqParamListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiReqParamListBuilder &operator=(const fb_OfiReqParamListBuilder &);
  flatbuffers::Offset<fb_OfiReqParamList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiReqParamList>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiReqParamList> Createfb_OfiReqParamList(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t dev_param_max_idx = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiParameter>>> param_list = 0) {
  fb_OfiReqParamListBuilder builder_(_fbb);
  builder_.add_param_list(param_list);
  builder_.add_dev_param_max_idx(dev_param_max_idx);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiReqParamList> Createfb_OfiReqParamListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t dev_param_max_idx = 0,
    const std::vector<flatbuffers::Offset<fb_OfiParameter>> *param_list = nullptr) {
  auto param_list__ = param_list ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiParameter>>(*param_list) : 0;
  return ofi::rawgraph::Createfb_OfiReqParamList(
      _fbb,
      dev_param_max_idx,
      param_list__);
}

struct fb_OfiParameter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_MANDATORY = 4,
    VT_IS_USER_DEFINED = 6,
    VT_IS_SCALAR = 8,
    VT_IS_ALLOCATE_EVERY_SESSION = 10,
    VT_BUF_INFO = 12
  };
  bool is_mandatory() const {
    return GetField<uint8_t>(VT_IS_MANDATORY, 0) != 0;
  }
  bool is_user_defined() const {
    return GetField<uint8_t>(VT_IS_USER_DEFINED, 0) != 0;
  }
  bool is_scalar() const {
    return GetField<uint8_t>(VT_IS_SCALAR, 0) != 0;
  }
  bool is_allocate_every_session() const {
    return GetField<uint8_t>(VT_IS_ALLOCATE_EVERY_SESSION, 0) != 0;
  }
  const fb_OfiMemory *buf_info() const {
    return GetPointer<const fb_OfiMemory *>(VT_BUF_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_MANDATORY) &&
           VerifyField<uint8_t>(verifier, VT_IS_USER_DEFINED) &&
           VerifyField<uint8_t>(verifier, VT_IS_SCALAR) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALLOCATE_EVERY_SESSION) &&
           VerifyOffset(verifier, VT_BUF_INFO) &&
           verifier.VerifyTable(buf_info()) &&
           verifier.EndTable();
  }
};

struct fb_OfiParameterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_is_mandatory(bool is_mandatory) {
    fbb_.AddElement<uint8_t>(fb_OfiParameter::VT_IS_MANDATORY, static_cast<uint8_t>(is_mandatory), 0);
  }
  void add_is_user_defined(bool is_user_defined) {
    fbb_.AddElement<uint8_t>(fb_OfiParameter::VT_IS_USER_DEFINED, static_cast<uint8_t>(is_user_defined), 0);
  }
  void add_is_scalar(bool is_scalar) {
    fbb_.AddElement<uint8_t>(fb_OfiParameter::VT_IS_SCALAR, static_cast<uint8_t>(is_scalar), 0);
  }
  void add_is_allocate_every_session(bool is_allocate_every_session) {
    fbb_.AddElement<uint8_t>(fb_OfiParameter::VT_IS_ALLOCATE_EVERY_SESSION, static_cast<uint8_t>(is_allocate_every_session), 0);
  }
  void add_buf_info(flatbuffers::Offset<fb_OfiMemory> buf_info) {
    fbb_.AddOffset(fb_OfiParameter::VT_BUF_INFO, buf_info);
  }
  explicit fb_OfiParameterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiParameterBuilder &operator=(const fb_OfiParameterBuilder &);
  flatbuffers::Offset<fb_OfiParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiParameter>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiParameter> Createfb_OfiParameter(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool is_mandatory = false,
    bool is_user_defined = false,
    bool is_scalar = false,
    bool is_allocate_every_session = false,
    flatbuffers::Offset<fb_OfiMemory> buf_info = 0) {
  fb_OfiParameterBuilder builder_(_fbb);
  builder_.add_buf_info(buf_info);
  builder_.add_is_allocate_every_session(is_allocate_every_session);
  builder_.add_is_scalar(is_scalar);
  builder_.add_is_user_defined(is_user_defined);
  builder_.add_is_mandatory(is_mandatory);
  return builder_.Finish();
}

struct fb_OfiScalar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POOL_INDEX = 4,
    VT_SCL_TYPE = 6,
    VT_OFFSET = 8,
    VT_TYPESIZE = 10,
    VT_LENGTH = 12,
    VT_NAME = 14
  };
  uint32_t pool_index() const {
    return GetField<uint32_t>(VT_POOL_INDEX, 0);
  }
  fb_OfiSclType scl_type() const {
    return static_cast<fb_OfiSclType>(GetField<uint32_t>(VT_SCL_TYPE, 0));
  }
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  uint32_t typesize() const {
    return GetField<uint32_t>(VT_TYPESIZE, 0);
  }
  uint32_t length() const {
    return GetField<uint32_t>(VT_LENGTH, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_POOL_INDEX) &&
           VerifyField<uint32_t>(verifier, VT_SCL_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           VerifyField<uint32_t>(verifier, VT_TYPESIZE) &&
           VerifyField<uint32_t>(verifier, VT_LENGTH) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct fb_OfiScalarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pool_index(uint32_t pool_index) {
    fbb_.AddElement<uint32_t>(fb_OfiScalar::VT_POOL_INDEX, pool_index, 0);
  }
  void add_scl_type(fb_OfiSclType scl_type) {
    fbb_.AddElement<uint32_t>(fb_OfiScalar::VT_SCL_TYPE, static_cast<uint32_t>(scl_type), 0);
  }
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(fb_OfiScalar::VT_OFFSET, offset, 0);
  }
  void add_typesize(uint32_t typesize) {
    fbb_.AddElement<uint32_t>(fb_OfiScalar::VT_TYPESIZE, typesize, 0);
  }
  void add_length(uint32_t length) {
    fbb_.AddElement<uint32_t>(fb_OfiScalar::VT_LENGTH, length, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(fb_OfiScalar::VT_NAME, name);
  }
  explicit fb_OfiScalarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiScalarBuilder &operator=(const fb_OfiScalarBuilder &);
  flatbuffers::Offset<fb_OfiScalar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiScalar>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiScalar> Createfb_OfiScalar(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t pool_index = 0,
    fb_OfiSclType scl_type = fb_OfiSclType_OFI_SCL_TYPE_NONE,
    uint32_t offset = 0,
    uint32_t typesize = 0,
    uint32_t length = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  fb_OfiScalarBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_length(length);
  builder_.add_typesize(typesize);
  builder_.add_offset(offset);
  builder_.add_scl_type(scl_type);
  builder_.add_pool_index(pool_index);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiScalar> Createfb_OfiScalarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t pool_index = 0,
    fb_OfiSclType scl_type = fb_OfiSclType_OFI_SCL_TYPE_NONE,
    uint32_t offset = 0,
    uint32_t typesize = 0,
    uint32_t length = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ofi::rawgraph::Createfb_OfiScalar(
      _fbb,
      pool_index,
      scl_type,
      offset,
      typesize,
      length,
      name__);
}

struct fb_BufferShapeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_CHANNEL = 8
  };
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  uint32_t channel() const {
    return GetField<uint32_t>(VT_CHANNEL, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint32_t>(verifier, VT_CHANNEL) &&
           verifier.EndTable();
  }
};

struct fb_BufferShapeInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(fb_BufferShapeInfo::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(fb_BufferShapeInfo::VT_HEIGHT, height, 0);
  }
  void add_channel(uint32_t channel) {
    fbb_.AddElement<uint32_t>(fb_BufferShapeInfo::VT_CHANNEL, channel, 0);
  }
  explicit fb_BufferShapeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_BufferShapeInfoBuilder &operator=(const fb_BufferShapeInfoBuilder &);
  flatbuffers::Offset<fb_BufferShapeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_BufferShapeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_BufferShapeInfo> Createfb_BufferShapeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t channel = 0) {
  fb_BufferShapeInfoBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

struct fb_OfiBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POOL_INDEX = 4,
    VT_OFFSET = 6,
    VT_SIZE = 8,
    VT_NAME = 10,
    VT_SHAPE = 12,
    VT_TYPE = 14,
    VT_QUANTIZATION = 16,
    VT_NN_TYPE = 18,
    VT_FLC_TYPE = 20,
    VT_UNIQUE_ID = 22
  };
  uint32_t pool_index() const {
    return GetField<uint32_t>(VT_POOL_INDEX, 0);
  }
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const fb_BufferShapeInfo *shape() const {
    return GetPointer<const fb_BufferShapeInfo *>(VT_SHAPE);
  }
  fb_OfiBufType type() const {
    return static_cast<fb_OfiBufType>(GetField<uint32_t>(VT_TYPE, 0));
  }
  const fb_OfiQuantParam *quantization() const {
    return GetPointer<const fb_OfiQuantParam *>(VT_QUANTIZATION);
  }
  fb_OfiBufNNType nn_type() const {
    return static_cast<fb_OfiBufNNType>(GetField<uint32_t>(VT_NN_TYPE, 0));
  }
  fb_OfiFLCType flc_type() const {
    return static_cast<fb_OfiFLCType>(GetField<uint8_t>(VT_FLC_TYPE, 0));
  }
  uint32_t unique_id() const {
    return GetField<uint32_t>(VT_UNIQUE_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_POOL_INDEX) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyTable(shape()) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_QUANTIZATION) &&
           verifier.VerifyTable(quantization()) &&
           VerifyField<uint32_t>(verifier, VT_NN_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_FLC_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_UNIQUE_ID) &&
           verifier.EndTable();
  }
};

struct fb_OfiBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pool_index(uint32_t pool_index) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_POOL_INDEX, pool_index, 0);
  }
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_OFFSET, offset, 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_SIZE, size, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(fb_OfiBuffer::VT_NAME, name);
  }
  void add_shape(flatbuffers::Offset<fb_BufferShapeInfo> shape) {
    fbb_.AddOffset(fb_OfiBuffer::VT_SHAPE, shape);
  }
  void add_type(fb_OfiBufType type) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  void add_quantization(flatbuffers::Offset<fb_OfiQuantParam> quantization) {
    fbb_.AddOffset(fb_OfiBuffer::VT_QUANTIZATION, quantization);
  }
  void add_nn_type(fb_OfiBufNNType nn_type) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_NN_TYPE, static_cast<uint32_t>(nn_type), 0);
  }
  void add_flc_type(fb_OfiFLCType flc_type) {
    fbb_.AddElement<uint8_t>(fb_OfiBuffer::VT_FLC_TYPE, static_cast<uint8_t>(flc_type), 0);
  }
  void add_unique_id(uint32_t unique_id) {
    fbb_.AddElement<uint32_t>(fb_OfiBuffer::VT_UNIQUE_ID, unique_id, 0);
  }
  explicit fb_OfiBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiBufferBuilder &operator=(const fb_OfiBufferBuilder &);
  flatbuffers::Offset<fb_OfiBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiBuffer> Createfb_OfiBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t pool_index = 0,
    uint32_t offset = 0,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<fb_BufferShapeInfo> shape = 0,
    fb_OfiBufType type = fb_OfiBufType_OFI_BUF_TYPE_NONE,
    flatbuffers::Offset<fb_OfiQuantParam> quantization = 0,
    fb_OfiBufNNType nn_type = fb_OfiBufNNType_OFI_BUF_GENERAL,
    fb_OfiFLCType flc_type = fb_OfiFLCType_OFI_FLC_NONE,
    uint32_t unique_id = 0) {
  fb_OfiBufferBuilder builder_(_fbb);
  builder_.add_unique_id(unique_id);
  builder_.add_nn_type(nn_type);
  builder_.add_quantization(quantization);
  builder_.add_type(type);
  builder_.add_shape(shape);
  builder_.add_name(name);
  builder_.add_size(size);
  builder_.add_offset(offset);
  builder_.add_pool_index(pool_index);
  builder_.add_flc_type(flc_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiBuffer> Createfb_OfiBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t pool_index = 0,
    uint32_t offset = 0,
    uint32_t size = 0,
    const char *name = nullptr,
    flatbuffers::Offset<fb_BufferShapeInfo> shape = 0,
    fb_OfiBufType type = fb_OfiBufType_OFI_BUF_TYPE_NONE,
    flatbuffers::Offset<fb_OfiQuantParam> quantization = 0,
    fb_OfiBufNNType nn_type = fb_OfiBufNNType_OFI_BUF_GENERAL,
    fb_OfiFLCType flc_type = fb_OfiFLCType_OFI_FLC_NONE,
    uint32_t unique_id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ofi::rawgraph::Createfb_OfiBuffer(
      _fbb,
      pool_index,
      offset,
      size,
      name__,
      shape,
      type,
      quantization,
      nn_type,
      flc_type,
      unique_id);
}

struct fb_OfiQuantParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCALE = 4,
    VT_ZERO_POINT = 6,
    VT_FL = 8
  };
  const flatbuffers::Vector<float> *scale() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
  }
  const flatbuffers::Vector<int32_t> *zero_point() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ZERO_POINT);
  }
  const flatbuffers::Vector<int32_t> *fl() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_FL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyVector(scale()) &&
           VerifyOffset(verifier, VT_ZERO_POINT) &&
           verifier.VerifyVector(zero_point()) &&
           VerifyOffset(verifier, VT_FL) &&
           verifier.VerifyVector(fl()) &&
           verifier.EndTable();
  }
};

struct fb_OfiQuantParamBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_scale(flatbuffers::Offset<flatbuffers::Vector<float>> scale) {
    fbb_.AddOffset(fb_OfiQuantParam::VT_SCALE, scale);
  }
  void add_zero_point(flatbuffers::Offset<flatbuffers::Vector<int32_t>> zero_point) {
    fbb_.AddOffset(fb_OfiQuantParam::VT_ZERO_POINT, zero_point);
  }
  void add_fl(flatbuffers::Offset<flatbuffers::Vector<int32_t>> fl) {
    fbb_.AddOffset(fb_OfiQuantParam::VT_FL, fl);
  }
  explicit fb_OfiQuantParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiQuantParamBuilder &operator=(const fb_OfiQuantParamBuilder &);
  flatbuffers::Offset<fb_OfiQuantParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiQuantParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiQuantParam> Createfb_OfiQuantParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> scale = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> zero_point = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> fl = 0) {
  fb_OfiQuantParamBuilder builder_(_fbb);
  builder_.add_fl(fl);
  builder_.add_zero_point(zero_point);
  builder_.add_scale(scale);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiQuantParam> Createfb_OfiQuantParamDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *scale = nullptr,
    const std::vector<int32_t> *zero_point = nullptr,
    const std::vector<int32_t> *fl = nullptr) {
  auto scale__ = scale ? _fbb.CreateVector<float>(*scale) : 0;
  auto zero_point__ = zero_point ? _fbb.CreateVector<int32_t>(*zero_point) : 0;
  auto fl__ = fl ? _fbb.CreateVector<int32_t>(*fl) : 0;
  return ofi::rawgraph::Createfb_OfiQuantParam(
      _fbb,
      scale__,
      zero_point__,
      fl__);
}

struct fb_OfiMemory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TARGET_DEV = 6,
    VT_SIZE = 8,
    VT_NAME = 10,
    VT_LOAD_DEFAULT = 12,
    VT_AUTO_ALLOCATION = 14,
    VT_BUF_INFO = 16
  };
  fb_OfiMemoryType type() const {
    return static_cast<fb_OfiMemoryType>(GetField<uint32_t>(VT_TYPE, 0));
  }
  fb_OfiTargetType target_dev() const {
    return static_cast<fb_OfiTargetType>(GetField<uint32_t>(VT_TARGET_DEV, 0));
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  fb_OfiMemLoadType load_default() const {
    return static_cast<fb_OfiMemLoadType>(GetField<uint8_t>(VT_LOAD_DEFAULT, 2));
  }
  bool auto_allocation() const {
    return GetField<uint8_t>(VT_AUTO_ALLOCATION, 0) != 0;
  }
  uint32_t buf_info() const {
    return GetField<uint32_t>(VT_BUF_INFO, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_TARGET_DEV) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_LOAD_DEFAULT) &&
           VerifyField<uint8_t>(verifier, VT_AUTO_ALLOCATION) &&
           VerifyField<uint32_t>(verifier, VT_BUF_INFO) &&
           verifier.EndTable();
  }
};

struct fb_OfiMemoryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fb_OfiMemoryType type) {
    fbb_.AddElement<uint32_t>(fb_OfiMemory::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  void add_target_dev(fb_OfiTargetType target_dev) {
    fbb_.AddElement<uint32_t>(fb_OfiMemory::VT_TARGET_DEV, static_cast<uint32_t>(target_dev), 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(fb_OfiMemory::VT_SIZE, size, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(fb_OfiMemory::VT_NAME, name);
  }
  void add_load_default(fb_OfiMemLoadType load_default) {
    fbb_.AddElement<uint8_t>(fb_OfiMemory::VT_LOAD_DEFAULT, static_cast<uint8_t>(load_default), 2);
  }
  void add_auto_allocation(bool auto_allocation) {
    fbb_.AddElement<uint8_t>(fb_OfiMemory::VT_AUTO_ALLOCATION, static_cast<uint8_t>(auto_allocation), 0);
  }
  void add_buf_info(uint32_t buf_info) {
    fbb_.AddElement<uint32_t>(fb_OfiMemory::VT_BUF_INFO, buf_info, 0);
  }
  explicit fb_OfiMemoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiMemoryBuilder &operator=(const fb_OfiMemoryBuilder &);
  flatbuffers::Offset<fb_OfiMemory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiMemory>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiMemory> Createfb_OfiMemory(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiMemoryType type = fb_OfiMemoryType_OFI_MEM_TYPE_NONE,
    fb_OfiTargetType target_dev = fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    fb_OfiMemLoadType load_default = fb_OfiMemLoadType_OFI_MEM_LOAD_NONE,
    bool auto_allocation = false,
    uint32_t buf_info = 0) {
  fb_OfiMemoryBuilder builder_(_fbb);
  builder_.add_buf_info(buf_info);
  builder_.add_name(name);
  builder_.add_size(size);
  builder_.add_target_dev(target_dev);
  builder_.add_type(type);
  builder_.add_auto_allocation(auto_allocation);
  builder_.add_load_default(load_default);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiMemory> Createfb_OfiMemoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiMemoryType type = fb_OfiMemoryType_OFI_MEM_TYPE_NONE,
    fb_OfiTargetType target_dev = fb_OfiTargetType_OFI_TARGET_CUSTOM_CPU,
    uint32_t size = 0,
    const char *name = nullptr,
    fb_OfiMemLoadType load_default = fb_OfiMemLoadType_OFI_MEM_LOAD_NONE,
    bool auto_allocation = false,
    uint32_t buf_info = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ofi::rawgraph::Createfb_OfiMemory(
      _fbb,
      type,
      target_dev,
      size,
      name__,
      load_default,
      auto_allocation,
      buf_info);
}

struct fb_KernelInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOAD_TYPE = 4,
    VT_LIB_PATH = 6,
    VT_FUNCTION_NAME = 8,
    VT_NUM_IN_BUFFERS = 10,
    VT_NUM_OUT_BUFFERS = 12,
    VT_NUM_USER_SCALARS = 14,
    VT_FUNCTION_ID = 16
  };
  fb_OfiKernelLoadType load_type() const {
    return static_cast<fb_OfiKernelLoadType>(GetField<int8_t>(VT_LOAD_TYPE, 0));
  }
  const flatbuffers::String *lib_path() const {
    return GetPointer<const flatbuffers::String *>(VT_LIB_PATH);
  }
  const flatbuffers::String *function_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNCTION_NAME);
  }
  uint32_t num_in_buffers() const {
    return GetField<uint32_t>(VT_NUM_IN_BUFFERS, 0);
  }
  uint32_t num_out_buffers() const {
    return GetField<uint32_t>(VT_NUM_OUT_BUFFERS, 0);
  }
  uint32_t num_user_scalars() const {
    return GetField<uint32_t>(VT_NUM_USER_SCALARS, 0);
  }
  uint32_t function_id() const {
    return GetField<uint32_t>(VT_FUNCTION_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LOAD_TYPE) &&
           VerifyOffset(verifier, VT_LIB_PATH) &&
           verifier.VerifyString(lib_path()) &&
           VerifyOffset(verifier, VT_FUNCTION_NAME) &&
           verifier.VerifyString(function_name()) &&
           VerifyField<uint32_t>(verifier, VT_NUM_IN_BUFFERS) &&
           VerifyField<uint32_t>(verifier, VT_NUM_OUT_BUFFERS) &&
           VerifyField<uint32_t>(verifier, VT_NUM_USER_SCALARS) &&
           VerifyField<uint32_t>(verifier, VT_FUNCTION_ID) &&
           verifier.EndTable();
  }
};

struct fb_KernelInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_load_type(fb_OfiKernelLoadType load_type) {
    fbb_.AddElement<int8_t>(fb_KernelInfo::VT_LOAD_TYPE, static_cast<int8_t>(load_type), 0);
  }
  void add_lib_path(flatbuffers::Offset<flatbuffers::String> lib_path) {
    fbb_.AddOffset(fb_KernelInfo::VT_LIB_PATH, lib_path);
  }
  void add_function_name(flatbuffers::Offset<flatbuffers::String> function_name) {
    fbb_.AddOffset(fb_KernelInfo::VT_FUNCTION_NAME, function_name);
  }
  void add_num_in_buffers(uint32_t num_in_buffers) {
    fbb_.AddElement<uint32_t>(fb_KernelInfo::VT_NUM_IN_BUFFERS, num_in_buffers, 0);
  }
  void add_num_out_buffers(uint32_t num_out_buffers) {
    fbb_.AddElement<uint32_t>(fb_KernelInfo::VT_NUM_OUT_BUFFERS, num_out_buffers, 0);
  }
  void add_num_user_scalars(uint32_t num_user_scalars) {
    fbb_.AddElement<uint32_t>(fb_KernelInfo::VT_NUM_USER_SCALARS, num_user_scalars, 0);
  }
  void add_function_id(uint32_t function_id) {
    fbb_.AddElement<uint32_t>(fb_KernelInfo::VT_FUNCTION_ID, function_id, 0);
  }
  explicit fb_KernelInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_KernelInfoBuilder &operator=(const fb_KernelInfoBuilder &);
  flatbuffers::Offset<fb_KernelInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_KernelInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_KernelInfo> Createfb_KernelInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiKernelLoadType load_type = fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL,
    flatbuffers::Offset<flatbuffers::String> lib_path = 0,
    flatbuffers::Offset<flatbuffers::String> function_name = 0,
    uint32_t num_in_buffers = 0,
    uint32_t num_out_buffers = 0,
    uint32_t num_user_scalars = 0,
    uint32_t function_id = 0) {
  fb_KernelInfoBuilder builder_(_fbb);
  builder_.add_function_id(function_id);
  builder_.add_num_user_scalars(num_user_scalars);
  builder_.add_num_out_buffers(num_out_buffers);
  builder_.add_num_in_buffers(num_in_buffers);
  builder_.add_function_name(function_name);
  builder_.add_lib_path(lib_path);
  builder_.add_load_type(load_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_KernelInfo> Createfb_KernelInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiKernelLoadType load_type = fb_OfiKernelLoadType_OFI_KERNEL_LOAD_TYPE_INTERNAL,
    const char *lib_path = nullptr,
    const char *function_name = nullptr,
    uint32_t num_in_buffers = 0,
    uint32_t num_out_buffers = 0,
    uint32_t num_user_scalars = 0,
    uint32_t function_id = 0) {
  auto lib_path__ = lib_path ? _fbb.CreateString(lib_path) : 0;
  auto function_name__ = function_name ? _fbb.CreateString(function_name) : 0;
  return ofi::rawgraph::Createfb_KernelInfo(
      _fbb,
      load_type,
      lib_path__,
      function_name__,
      num_in_buffers,
      num_out_buffers,
      num_user_scalars,
      function_id);
}

struct fb_OfiMacroSubGraph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_ID = 4,
    VT_NODE_IDS = 6,
    VT_ASSIGNED_TARGET = 8,
    VT_KERNEL_INFO = 10,
    VT_IN_DEPS = 12,
    VT_OUT_TRIGS = 14,
    VT_IN_BUFFERS = 16,
    VT_OUT_BUFFERS = 18,
    VT_USR_SCALARS = 20
  };
  uint32_t msg_id() const {
    return GetField<uint32_t>(VT_MSG_ID, 0);
  }
  const flatbuffers::Vector<uint32_t> *node_ids() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_NODE_IDS);
  }
  fb_OfiTargetType assigned_target() const {
    return static_cast<fb_OfiTargetType>(GetField<uint32_t>(VT_ASSIGNED_TARGET, 99));
  }
  const fb_KernelInfo *kernel_info() const {
    return GetPointer<const fb_KernelInfo *>(VT_KERNEL_INFO);
  }
  const flatbuffers::Vector<uint32_t> *in_deps() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IN_DEPS);
  }
  const flatbuffers::Vector<uint32_t> *out_trigs() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OUT_TRIGS);
  }
  const flatbuffers::Vector<uint32_t> *in_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IN_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *out_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OUT_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *usr_scalars() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_USR_SCALARS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MSG_ID) &&
           VerifyOffset(verifier, VT_NODE_IDS) &&
           verifier.VerifyVector(node_ids()) &&
           VerifyField<uint32_t>(verifier, VT_ASSIGNED_TARGET) &&
           VerifyOffset(verifier, VT_KERNEL_INFO) &&
           verifier.VerifyTable(kernel_info()) &&
           VerifyOffset(verifier, VT_IN_DEPS) &&
           verifier.VerifyVector(in_deps()) &&
           VerifyOffset(verifier, VT_OUT_TRIGS) &&
           verifier.VerifyVector(out_trigs()) &&
           VerifyOffset(verifier, VT_IN_BUFFERS) &&
           verifier.VerifyVector(in_buffers()) &&
           VerifyOffset(verifier, VT_OUT_BUFFERS) &&
           verifier.VerifyVector(out_buffers()) &&
           VerifyOffset(verifier, VT_USR_SCALARS) &&
           verifier.VerifyVector(usr_scalars()) &&
           verifier.EndTable();
  }
};

struct fb_OfiMacroSubGraphBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_id(uint32_t msg_id) {
    fbb_.AddElement<uint32_t>(fb_OfiMacroSubGraph::VT_MSG_ID, msg_id, 0);
  }
  void add_node_ids(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> node_ids) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_NODE_IDS, node_ids);
  }
  void add_assigned_target(fb_OfiTargetType assigned_target) {
    fbb_.AddElement<uint32_t>(fb_OfiMacroSubGraph::VT_ASSIGNED_TARGET, static_cast<uint32_t>(assigned_target), 99);
  }
  void add_kernel_info(flatbuffers::Offset<fb_KernelInfo> kernel_info) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_KERNEL_INFO, kernel_info);
  }
  void add_in_deps(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_deps) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_IN_DEPS, in_deps);
  }
  void add_out_trigs(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_trigs) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_OUT_TRIGS, out_trigs);
  }
  void add_in_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_buffers) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_IN_BUFFERS, in_buffers);
  }
  void add_out_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_buffers) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_OUT_BUFFERS, out_buffers);
  }
  void add_usr_scalars(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> usr_scalars) {
    fbb_.AddOffset(fb_OfiMacroSubGraph::VT_USR_SCALARS, usr_scalars);
  }
  explicit fb_OfiMacroSubGraphBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiMacroSubGraphBuilder &operator=(const fb_OfiMacroSubGraphBuilder &);
  flatbuffers::Offset<fb_OfiMacroSubGraph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiMacroSubGraph>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiMacroSubGraph> Createfb_OfiMacroSubGraph(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t msg_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> node_ids = 0,
    fb_OfiTargetType assigned_target = fb_OfiTargetType_OFI_TARGET_NONE,
    flatbuffers::Offset<fb_KernelInfo> kernel_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_deps = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_trigs = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> usr_scalars = 0) {
  fb_OfiMacroSubGraphBuilder builder_(_fbb);
  builder_.add_usr_scalars(usr_scalars);
  builder_.add_out_buffers(out_buffers);
  builder_.add_in_buffers(in_buffers);
  builder_.add_out_trigs(out_trigs);
  builder_.add_in_deps(in_deps);
  builder_.add_kernel_info(kernel_info);
  builder_.add_assigned_target(assigned_target);
  builder_.add_node_ids(node_ids);
  builder_.add_msg_id(msg_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiMacroSubGraph> Createfb_OfiMacroSubGraphDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t msg_id = 0,
    const std::vector<uint32_t> *node_ids = nullptr,
    fb_OfiTargetType assigned_target = fb_OfiTargetType_OFI_TARGET_NONE,
    flatbuffers::Offset<fb_KernelInfo> kernel_info = 0,
    const std::vector<uint32_t> *in_deps = nullptr,
    const std::vector<uint32_t> *out_trigs = nullptr,
    const std::vector<uint32_t> *in_buffers = nullptr,
    const std::vector<uint32_t> *out_buffers = nullptr,
    const std::vector<uint32_t> *usr_scalars = nullptr) {
  auto node_ids__ = node_ids ? _fbb.CreateVector<uint32_t>(*node_ids) : 0;
  auto in_deps__ = in_deps ? _fbb.CreateVector<uint32_t>(*in_deps) : 0;
  auto out_trigs__ = out_trigs ? _fbb.CreateVector<uint32_t>(*out_trigs) : 0;
  auto in_buffers__ = in_buffers ? _fbb.CreateVector<uint32_t>(*in_buffers) : 0;
  auto out_buffers__ = out_buffers ? _fbb.CreateVector<uint32_t>(*out_buffers) : 0;
  auto usr_scalars__ = usr_scalars ? _fbb.CreateVector<uint32_t>(*usr_scalars) : 0;
  return ofi::rawgraph::Createfb_OfiMacroSubGraph(
      _fbb,
      msg_id,
      node_ids__,
      assigned_target,
      kernel_info,
      in_deps__,
      out_trigs__,
      in_buffers__,
      out_buffers__,
      usr_scalars__);
}

struct fb_OfiNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODE_ID = 4,
    VT_NAME = 6,
    VT_FUNCTION_ID = 8,
    VT_MSG_ID = 10,
    VT_IN_DEPS = 12,
    VT_OUT_TRIGS = 14,
    VT_IN_BUFFERS = 16,
    VT_OUT_BUFFERS = 18,
    VT_USR_SCALARS = 20
  };
  uint32_t node_id() const {
    return GetField<uint32_t>(VT_NODE_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t function_id() const {
    return GetField<uint32_t>(VT_FUNCTION_ID, 0);
  }
  uint32_t msg_id() const {
    return GetField<uint32_t>(VT_MSG_ID, 0);
  }
  const flatbuffers::Vector<uint32_t> *in_deps() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IN_DEPS);
  }
  const flatbuffers::Vector<uint32_t> *out_trigs() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OUT_TRIGS);
  }
  const flatbuffers::Vector<uint32_t> *in_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IN_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *out_buffers() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OUT_BUFFERS);
  }
  const flatbuffers::Vector<uint32_t> *usr_scalars() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_USR_SCALARS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NODE_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_FUNCTION_ID) &&
           VerifyField<uint32_t>(verifier, VT_MSG_ID) &&
           VerifyOffset(verifier, VT_IN_DEPS) &&
           verifier.VerifyVector(in_deps()) &&
           VerifyOffset(verifier, VT_OUT_TRIGS) &&
           verifier.VerifyVector(out_trigs()) &&
           VerifyOffset(verifier, VT_IN_BUFFERS) &&
           verifier.VerifyVector(in_buffers()) &&
           VerifyOffset(verifier, VT_OUT_BUFFERS) &&
           verifier.VerifyVector(out_buffers()) &&
           VerifyOffset(verifier, VT_USR_SCALARS) &&
           verifier.VerifyVector(usr_scalars()) &&
           verifier.EndTable();
  }
};

struct fb_OfiNodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node_id(uint32_t node_id) {
    fbb_.AddElement<uint32_t>(fb_OfiNode::VT_NODE_ID, node_id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(fb_OfiNode::VT_NAME, name);
  }
  void add_function_id(uint32_t function_id) {
    fbb_.AddElement<uint32_t>(fb_OfiNode::VT_FUNCTION_ID, function_id, 0);
  }
  void add_msg_id(uint32_t msg_id) {
    fbb_.AddElement<uint32_t>(fb_OfiNode::VT_MSG_ID, msg_id, 0);
  }
  void add_in_deps(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_deps) {
    fbb_.AddOffset(fb_OfiNode::VT_IN_DEPS, in_deps);
  }
  void add_out_trigs(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_trigs) {
    fbb_.AddOffset(fb_OfiNode::VT_OUT_TRIGS, out_trigs);
  }
  void add_in_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_buffers) {
    fbb_.AddOffset(fb_OfiNode::VT_IN_BUFFERS, in_buffers);
  }
  void add_out_buffers(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_buffers) {
    fbb_.AddOffset(fb_OfiNode::VT_OUT_BUFFERS, out_buffers);
  }
  void add_usr_scalars(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> usr_scalars) {
    fbb_.AddOffset(fb_OfiNode::VT_USR_SCALARS, usr_scalars);
  }
  explicit fb_OfiNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiNodeBuilder &operator=(const fb_OfiNodeBuilder &);
  flatbuffers::Offset<fb_OfiNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiNode> Createfb_OfiNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t node_id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t function_id = 0,
    uint32_t msg_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_deps = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_trigs = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> out_buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> usr_scalars = 0) {
  fb_OfiNodeBuilder builder_(_fbb);
  builder_.add_usr_scalars(usr_scalars);
  builder_.add_out_buffers(out_buffers);
  builder_.add_in_buffers(in_buffers);
  builder_.add_out_trigs(out_trigs);
  builder_.add_in_deps(in_deps);
  builder_.add_msg_id(msg_id);
  builder_.add_function_id(function_id);
  builder_.add_name(name);
  builder_.add_node_id(node_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiNode> Createfb_OfiNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t node_id = 0,
    const char *name = nullptr,
    uint32_t function_id = 0,
    uint32_t msg_id = 0,
    const std::vector<uint32_t> *in_deps = nullptr,
    const std::vector<uint32_t> *out_trigs = nullptr,
    const std::vector<uint32_t> *in_buffers = nullptr,
    const std::vector<uint32_t> *out_buffers = nullptr,
    const std::vector<uint32_t> *usr_scalars = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto in_deps__ = in_deps ? _fbb.CreateVector<uint32_t>(*in_deps) : 0;
  auto out_trigs__ = out_trigs ? _fbb.CreateVector<uint32_t>(*out_trigs) : 0;
  auto in_buffers__ = in_buffers ? _fbb.CreateVector<uint32_t>(*in_buffers) : 0;
  auto out_buffers__ = out_buffers ? _fbb.CreateVector<uint32_t>(*out_buffers) : 0;
  auto usr_scalars__ = usr_scalars ? _fbb.CreateVector<uint32_t>(*usr_scalars) : 0;
  return ofi::rawgraph::Createfb_OfiNode(
      _fbb,
      node_id,
      name__,
      function_id,
      msg_id,
      in_deps__,
      out_trigs__,
      in_buffers__,
      out_buffers__,
      usr_scalars__);
}

struct fb_msg_offset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_ID = 4,
    VT_OFFSET = 6
  };
  uint32_t msg_id() const {
    return GetField<uint32_t>(VT_MSG_ID, 0);
  }
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MSG_ID) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           verifier.EndTable();
  }
};

struct fb_msg_offsetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_id(uint32_t msg_id) {
    fbb_.AddElement<uint32_t>(fb_msg_offset::VT_MSG_ID, msg_id, 0);
  }
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(fb_msg_offset::VT_OFFSET, offset, 0);
  }
  explicit fb_msg_offsetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_msg_offsetBuilder &operator=(const fb_msg_offsetBuilder &);
  flatbuffers::Offset<fb_msg_offset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_msg_offset>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_msg_offset> Createfb_msg_offset(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t msg_id = 0,
    uint32_t offset = 0) {
  fb_msg_offsetBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_msg_id(msg_id);
  return builder_.Finish();
}

struct fb_OfiTargetSpecificGraphDescriptor_DSP2018 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_OFFSET_INFO = 4,
    VT_TSGD_BIN_NAME = 6,
    VT_WEIGHT_INFO = 8,
    VT_BIAS_INFO = 10,
    VT_TMP_BUF_INFO = 12,
    VT_GRAPH_INFO = 14
  };
  const flatbuffers::Vector<flatbuffers::Offset<fb_msg_offset>> *msg_offset_info() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_msg_offset>> *>(VT_MSG_OFFSET_INFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tsgd_bin_name() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TSGD_BIN_NAME);
  }
  const fb_OfiBuffer *weight_info() const {
    return GetPointer<const fb_OfiBuffer *>(VT_WEIGHT_INFO);
  }
  const fb_OfiBuffer *bias_info() const {
    return GetPointer<const fb_OfiBuffer *>(VT_BIAS_INFO);
  }
  const fb_OfiMemory *tmp_buf_info() const {
    return GetPointer<const fb_OfiMemory *>(VT_TMP_BUF_INFO);
  }
  const fb_OfiMemory *graph_info() const {
    return GetPointer<const fb_OfiMemory *>(VT_GRAPH_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG_OFFSET_INFO) &&
           verifier.VerifyVector(msg_offset_info()) &&
           verifier.VerifyVectorOfTables(msg_offset_info()) &&
           VerifyOffset(verifier, VT_TSGD_BIN_NAME) &&
           verifier.VerifyVector(tsgd_bin_name()) &&
           verifier.VerifyVectorOfStrings(tsgd_bin_name()) &&
           VerifyOffset(verifier, VT_WEIGHT_INFO) &&
           verifier.VerifyTable(weight_info()) &&
           VerifyOffset(verifier, VT_BIAS_INFO) &&
           verifier.VerifyTable(bias_info()) &&
           VerifyOffset(verifier, VT_TMP_BUF_INFO) &&
           verifier.VerifyTable(tmp_buf_info()) &&
           VerifyOffset(verifier, VT_GRAPH_INFO) &&
           verifier.VerifyTable(graph_info()) &&
           verifier.EndTable();
  }
};

struct fb_OfiTargetSpecificGraphDescriptor_DSP2018Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_offset_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_msg_offset>>> msg_offset_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_MSG_OFFSET_INFO, msg_offset_info);
  }
  void add_tsgd_bin_name(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tsgd_bin_name) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_TSGD_BIN_NAME, tsgd_bin_name);
  }
  void add_weight_info(flatbuffers::Offset<fb_OfiBuffer> weight_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_WEIGHT_INFO, weight_info);
  }
  void add_bias_info(flatbuffers::Offset<fb_OfiBuffer> bias_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_BIAS_INFO, bias_info);
  }
  void add_tmp_buf_info(flatbuffers::Offset<fb_OfiMemory> tmp_buf_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_TMP_BUF_INFO, tmp_buf_info);
  }
  void add_graph_info(flatbuffers::Offset<fb_OfiMemory> graph_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2018::VT_GRAPH_INFO, graph_info);
  }
  explicit fb_OfiTargetSpecificGraphDescriptor_DSP2018Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiTargetSpecificGraphDescriptor_DSP2018Builder &operator=(const fb_OfiTargetSpecificGraphDescriptor_DSP2018Builder &);
  flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018> Createfb_OfiTargetSpecificGraphDescriptor_DSP2018(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_msg_offset>>> msg_offset_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tsgd_bin_name = 0,
    flatbuffers::Offset<fb_OfiBuffer> weight_info = 0,
    flatbuffers::Offset<fb_OfiBuffer> bias_info = 0,
    flatbuffers::Offset<fb_OfiMemory> tmp_buf_info = 0,
    flatbuffers::Offset<fb_OfiMemory> graph_info = 0) {
  fb_OfiTargetSpecificGraphDescriptor_DSP2018Builder builder_(_fbb);
  builder_.add_graph_info(graph_info);
  builder_.add_tmp_buf_info(tmp_buf_info);
  builder_.add_bias_info(bias_info);
  builder_.add_weight_info(weight_info);
  builder_.add_tsgd_bin_name(tsgd_bin_name);
  builder_.add_msg_offset_info(msg_offset_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018> Createfb_OfiTargetSpecificGraphDescriptor_DSP2018Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fb_msg_offset>> *msg_offset_info = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *tsgd_bin_name = nullptr,
    flatbuffers::Offset<fb_OfiBuffer> weight_info = 0,
    flatbuffers::Offset<fb_OfiBuffer> bias_info = 0,
    flatbuffers::Offset<fb_OfiMemory> tmp_buf_info = 0,
    flatbuffers::Offset<fb_OfiMemory> graph_info = 0) {
  auto msg_offset_info__ = msg_offset_info ? _fbb.CreateVector<flatbuffers::Offset<fb_msg_offset>>(*msg_offset_info) : 0;
  auto tsgd_bin_name__ = tsgd_bin_name ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*tsgd_bin_name) : 0;
  return ofi::rawgraph::Createfb_OfiTargetSpecificGraphDescriptor_DSP2018(
      _fbb,
      msg_offset_info__,
      tsgd_bin_name__,
      weight_info,
      bias_info,
      tmp_buf_info,
      graph_info);
}

struct fb_OfiTargetSpecificGraphDescriptor_DSP2019 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIB_BIN_LIST = 4,
    VT_GRAPH_INFO = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<fb_OfiOpLibrary>> *lib_bin_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fb_OfiOpLibrary>> *>(VT_LIB_BIN_LIST);
  }
  const fb_OfiMemory *graph_info() const {
    return GetPointer<const fb_OfiMemory *>(VT_GRAPH_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIB_BIN_LIST) &&
           verifier.VerifyVector(lib_bin_list()) &&
           verifier.VerifyVectorOfTables(lib_bin_list()) &&
           VerifyOffset(verifier, VT_GRAPH_INFO) &&
           verifier.VerifyTable(graph_info()) &&
           verifier.EndTable();
  }
};

struct fb_OfiTargetSpecificGraphDescriptor_DSP2019Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lib_bin_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiOpLibrary>>> lib_bin_list) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2019::VT_LIB_BIN_LIST, lib_bin_list);
  }
  void add_graph_info(flatbuffers::Offset<fb_OfiMemory> graph_info) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor_DSP2019::VT_GRAPH_INFO, graph_info);
  }
  explicit fb_OfiTargetSpecificGraphDescriptor_DSP2019Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiTargetSpecificGraphDescriptor_DSP2019Builder &operator=(const fb_OfiTargetSpecificGraphDescriptor_DSP2019Builder &);
  flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019> Createfb_OfiTargetSpecificGraphDescriptor_DSP2019(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb_OfiOpLibrary>>> lib_bin_list = 0,
    flatbuffers::Offset<fb_OfiMemory> graph_info = 0) {
  fb_OfiTargetSpecificGraphDescriptor_DSP2019Builder builder_(_fbb);
  builder_.add_graph_info(graph_info);
  builder_.add_lib_bin_list(lib_bin_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019> Createfb_OfiTargetSpecificGraphDescriptor_DSP2019Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fb_OfiOpLibrary>> *lib_bin_list = nullptr,
    flatbuffers::Offset<fb_OfiMemory> graph_info = 0) {
  auto lib_bin_list__ = lib_bin_list ? _fbb.CreateVector<flatbuffers::Offset<fb_OfiOpLibrary>>(*lib_bin_list) : 0;
  return ofi::rawgraph::Createfb_OfiTargetSpecificGraphDescriptor_DSP2019(
      _fbb,
      lib_bin_list__,
      graph_info);
}

struct fb_OfiTargetSpecificGraphDescriptor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DSP2018 = 6,
    VT_DSP2019 = 8
  };
  fb_OfiGraphType type() const {
    return static_cast<fb_OfiGraphType>(GetField<uint16_t>(VT_TYPE, 0));
  }
  const fb_OfiTargetSpecificGraphDescriptor_DSP2018 *dsp2018() const {
    return GetPointer<const fb_OfiTargetSpecificGraphDescriptor_DSP2018 *>(VT_DSP2018);
  }
  const fb_OfiTargetSpecificGraphDescriptor_DSP2019 *dsp2019() const {
    return GetPointer<const fb_OfiTargetSpecificGraphDescriptor_DSP2019 *>(VT_DSP2019);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_DSP2018) &&
           verifier.VerifyTable(dsp2018()) &&
           VerifyOffset(verifier, VT_DSP2019) &&
           verifier.VerifyTable(dsp2019()) &&
           verifier.EndTable();
  }
};

struct fb_OfiTargetSpecificGraphDescriptorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fb_OfiGraphType type) {
    fbb_.AddElement<uint16_t>(fb_OfiTargetSpecificGraphDescriptor::VT_TYPE, static_cast<uint16_t>(type), 0);
  }
  void add_dsp2018(flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018> dsp2018) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor::VT_DSP2018, dsp2018);
  }
  void add_dsp2019(flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019> dsp2019) {
    fbb_.AddOffset(fb_OfiTargetSpecificGraphDescriptor::VT_DSP2019, dsp2019);
  }
  explicit fb_OfiTargetSpecificGraphDescriptorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiTargetSpecificGraphDescriptorBuilder &operator=(const fb_OfiTargetSpecificGraphDescriptorBuilder &);
  flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor> Createfb_OfiTargetSpecificGraphDescriptor(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiGraphType type = fb_OfiGraphType_OFI_GRAPH_TYPE_NOT_DEFINED,
    flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2018> dsp2018 = 0,
    flatbuffers::Offset<fb_OfiTargetSpecificGraphDescriptor_DSP2019> dsp2019 = 0) {
  fb_OfiTargetSpecificGraphDescriptorBuilder builder_(_fbb);
  builder_.add_dsp2019(dsp2019);
  builder_.add_dsp2018(dsp2018);
  builder_.add_type(type);
  return builder_.Finish();
}

struct fb_OfiOpLibrary FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_LIB_ID = 6,
    VT_LIB_PATH = 8,
    VT_VERSION = 10
  };
  fb_OfiOpLibraryType type() const {
    return static_cast<fb_OfiOpLibraryType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t lib_id() const {
    return GetField<uint32_t>(VT_LIB_ID, 0);
  }
  const flatbuffers::String *lib_path() const {
    return GetPointer<const flatbuffers::String *>(VT_LIB_PATH);
  }
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 1);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_LIB_ID) &&
           VerifyOffset(verifier, VT_LIB_PATH) &&
           verifier.VerifyString(lib_path()) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           verifier.EndTable();
  }
};

struct fb_OfiOpLibraryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fb_OfiOpLibraryType type) {
    fbb_.AddElement<int8_t>(fb_OfiOpLibrary::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_lib_id(uint32_t lib_id) {
    fbb_.AddElement<uint32_t>(fb_OfiOpLibrary::VT_LIB_ID, lib_id, 0);
  }
  void add_lib_path(flatbuffers::Offset<flatbuffers::String> lib_path) {
    fbb_.AddOffset(fb_OfiOpLibrary::VT_LIB_PATH, lib_path);
  }
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(fb_OfiOpLibrary::VT_VERSION, version, 1);
  }
  explicit fb_OfiOpLibraryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fb_OfiOpLibraryBuilder &operator=(const fb_OfiOpLibraryBuilder &);
  flatbuffers::Offset<fb_OfiOpLibrary> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<fb_OfiOpLibrary>(end);
    return o;
  }
};

inline flatbuffers::Offset<fb_OfiOpLibrary> Createfb_OfiOpLibrary(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiOpLibraryType type = fb_OfiOpLibraryType_LIB_BUILTIN,
    uint32_t lib_id = 0,
    flatbuffers::Offset<flatbuffers::String> lib_path = 0,
    uint32_t version = 1) {
  fb_OfiOpLibraryBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_lib_path(lib_path);
  builder_.add_lib_id(lib_id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<fb_OfiOpLibrary> Createfb_OfiOpLibraryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fb_OfiOpLibraryType type = fb_OfiOpLibraryType_LIB_BUILTIN,
    uint32_t lib_id = 0,
    const char *lib_path = nullptr,
    uint32_t version = 1) {
  auto lib_path__ = lib_path ? _fbb.CreateString(lib_path) : 0;
  return ofi::rawgraph::Createfb_OfiOpLibrary(
      _fbb,
      type,
      lib_id,
      lib_path__,
      version);
}

inline const ofi::rawgraph::fb_OfiRawGraph *Getfb_OfiRawGraph(const void *buf) {
  return flatbuffers::GetRoot<ofi::rawgraph::fb_OfiRawGraph>(buf);
}

inline const ofi::rawgraph::fb_OfiRawGraph *GetSizePrefixedfb_OfiRawGraph(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ofi::rawgraph::fb_OfiRawGraph>(buf);
}

inline bool Verifyfb_OfiRawGraphBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ofi::rawgraph::fb_OfiRawGraph>(nullptr);
}

inline bool VerifySizePrefixedfb_OfiRawGraphBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ofi::rawgraph::fb_OfiRawGraph>(nullptr);
}

inline void Finishfb_OfiRawGraphBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ofi::rawgraph::fb_OfiRawGraph> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedfb_OfiRawGraphBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ofi::rawgraph::fb_OfiRawGraph> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rawgraph
}  // namespace ofi

#endif  // FLATBUFFERS_GENERATED_SCHEMA_OFI_RAWGRAPH_H_
