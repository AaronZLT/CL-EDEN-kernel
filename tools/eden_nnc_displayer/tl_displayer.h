/*
 * Copyright (C) 2018 Samsung Electronics Co. LTD
 *
 * This software is proprietary of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 */

/**
 * @file    tflite_converter.h
 * @brief   This is a converter from TFLITE to EdenModel.
 * @details This header defines TFLITE Converter class.
 * @version 0.6 Basic scenario support & modified
 *          Supported functions are as below.
 *          NnRet CreateModelFromFile(const int8_t* pathToFile, uint32_t options, EdenModel** model)
 *          NnRet DestoryModel(EdenModel* model)
 */

#ifndef EDENMODEL_TFLITE_CONVERTER_H_
#define EDENMODEL_TFLITE_CONVERTER_H_

#include <cstdint>  // int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t
#include <string>
#include <vector>
#include <utility>

#include "schema_generated.h"   // auto-generated by flact with schema.fbs
#include "flatbuffers/flexbuffers.h"
#include "eden_model_types.h"

namespace eden {
namespace nn {

class EdenModel;

#define PREFIX_BLACK "[30m"
#define PREFIX_RED "[31m"
#define PREFIX_GREEN "[32m"
#define PREFIX_YELLOW "[33m"
#define PREFIX_BLUE "[34m"
#define PREFIX_MAGENTA "[35m"
#define PREFIX_CYAN "[36m"
#define PREFIX_WHITE "[37m"
#define POSTFIX "[m"

/**
 *  TfLiteDisplayer class. This class implements TFLITE Converter.
 */
class TfLiteDisplayer {
public:
    TfLiteDisplayer(void) : filename_str(""), model_size(0) {}
    virtual ~TfLiteDisplayer(void) {}

    int ModelLoading(const char* filename);
    int ModelUnloading() {
       model_size = 0;
       filename_str = "";
       return 0;
    }

    int GetCompileDataFromMemory();
    void DumpTfLiteModel(const tflite::Model* tfLiteModel);
    const char* GetTensorType(int tensorType);

    void ShowLoadedData();

private:
    int PrintVersion(const tflite::Model* tfLiteModel);
    int PrintOperatorCodes(const tflite::Model* tfLiteModel);
    int PrintSubgraphs(const tflite::Model* tfLiteModel);
    int PrintDescription(const tflite::Model* tfLiteModel);
    int PrintBuffers(const tflite::Model* tfLiteModel);

    int PrintSubgraphInOut(const tflite::Model* tfLiteModel, int subgraphId);
    int PrintSubgraphTensors(const tflite::Model* tfLiteModel, int subgraphId);
    int PrintSubgraphName(const tflite::Model* tfLiteModel, int subgraphId);
    int PrintSubgraphOperators(const tflite::Model* tfLiteModel, int subgraphId);

    std::unique_ptr<char> loaded_model;
    size_t model_size;
    std::string filename_str;

    std::vector<std::pair<std::string, int>> operators_data;
};

}  // namespace nn
}  // namespace eden

#endif  // EDENMODEL_TFLITE_CONVERTER_H_
